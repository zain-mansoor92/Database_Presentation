-- 1. Create the Database
CREATE DATABASE Urostore_DB;
USE Urostore_DB;

-- 2. Create Tables

-- Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY ,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE,
    Phone VARCHAR(15),
    Address TEXT
);

-- Products Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY ,
    ProductName VARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) CHECK (Price > 0),
    Stock INT DEFAULT 0
);

-- Orders Table
CREATE TABLE Orders(
    OrderID INT PRIMARY KEY ,
    OrderDate DATE NOT NULL,
    CustomerID INT,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ON DELETE CASCADE
);

-- OrderDetails Table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY ,
    OrderID INT,
    ProductID INT,
    Quantity INT CHECK (Quantity > 0),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID) ON DELETE CASCADE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- 3. Insert Data

-- Insert Customers
INSERT INTO Customers (CustomerID,Name, Email, Phone, Address) VALUES
(1,'Ali Khan', 'ali@gmail.com', '03001234567', 'Lahore'),
(2,'Sara Ahmed', 'sara@gmail.com', '03017654321', 'Karachi'),
(3,'Usman Riaz', 'usman@gmail.com', '03009876543', 'Islamabad');

-- Insert Products
INSERT INTO Products (ProductID,ProductName, Price, Stock) VALUES
(1,'Smartphone', 35000.00, 50),
(2,'Laptop', 80000.00, 20),
(3,'Wireless Earbuds', 5000.00, 100),
(4,'Smartwatch', 15000.00, 30);

-- Insert Orders
INSERT INTO Orders (OrderID,OrderDate, CustomerID) VALUES
(1,'2025-08-01', 1),
(2,'2025-08-02', 2),
(3,'2025-08-03', 3);

-- Insert Order Details
INSERT INTO OrderDetails (OrderDetailID,OrderID, ProductID, Quantity) VALUES
(1, 1, 1, 2),
(2, 1, 3, 1),
(3, 2, 2, 1),
(4, 3, 4, 2);

-- 4. Alter Queries

-- Add Category to Products
ALTER TABLE Products ADD Category VARCHAR(50);

--Drop Column 'Category'
ALTER TABLE Products DROP COLUMN Category ;


-- 5. SELECT Queries (Individual Tables)
SELECT * FROM Customers;
SELECT * FROM Products;
SELECT * FROM Orders;
SELECT * FROM OrderDetails;

-- 6. JOIN Queries

-- Orders with Customer Names
SELECT Orders.OrderID, Orders.OrderDate, Customers.Name AS CustomerName
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID;

-- Order Details with Product Names
SELECT OrderDetails.OrderDetailID, Orders.OrderID, Products.ProductName, OrderDetails.Quantity
FROM OrderDetails
JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID;

-- Full Order Info
SELECT 
    Orders.OrderID,
    Customers.Name AS CustomerName,
    Products.ProductName,
    OrderDetails.Quantity,
    Orders.OrderDate
FROM OrderDetails
JOIN Orders ON OrderDetails.OrderID = Orders.OrderID
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
JOIN Products ON OrderDetails.ProductID = Products.ProductID;

-- 7. Advanced Queries

-- Orders placed by 'Ali Khan'
SELECT Orders.OrderID, Orders.OrderDate, Products.ProductName, OrderDetails.Quantity
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
JOIN OrderDetails ON Orders.OrderID = OrderDetails.OrderID
JOIN Products ON OrderDetails.ProductID = Products.ProductID
WHERE Customers.Name = 'Ali Khan';

-- Total quantity ordered per product
SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalOrdered
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;

-- Products ordered more than once
SELECT Products.ProductName, COUNT(OrderDetails.OrderDetailID) AS TimesOrdered
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName
HAVING COUNT(OrderDetails.OrderDetailID) > 1;

-- Orders sorted by date
SELECT Orders.OrderID, Customers.Name, Orders.OrderDate
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
ORDER BY Orders.OrderDate DESC;

SELECT * FROM Customers WHERE Address = Lahore;


-- Products with stock < 40
SELECT * FROM Products WHERE Stock < 40;

-- Update Product Stock
UPDATE Products SET Stock = Stock - 2 WHERE ProductID = 1;

-- Delete a Customer (Cascade deletes Orders & OrderDetails)
DELETE FROM Customers WHERE CustomerID = 3;

n';

-- Total quantity ordered per product
SELECT Products.ProductName, SUM(OrderDetails.Quantity) AS TotalOrdered
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName;

-- Products ordered more than once
SELECT Products.ProductName, COUNT(OrderDetails.OrderDetailID) AS TimesOrdered
FROM OrderDetails
JOIN Products ON OrderDetails.ProductID = Products.ProductID
GROUP BY Products.ProductName
HAVING COUNT(OrderDetails.OrderDetailID) > 1;

-- Orders sorted by date
SELECT Orders.OrderID, Customers.Name, Orders.OrderDate
FROM Orders
JOIN Customers ON Orders.CustomerID = Customers.CustomerID
ORDER BY Orders.OrderDate DESC;

SELECT * FROM Customers WHERE 